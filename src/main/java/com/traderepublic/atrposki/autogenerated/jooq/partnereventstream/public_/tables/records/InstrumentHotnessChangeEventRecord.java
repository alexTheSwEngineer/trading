/*
 * This file is generated by jOOQ.
 */
package com.traderepublic.atrposki.autogenerated.jooq.partnereventstream.public_.tables.records;


import com.traderepublic.atrposki.autogenerated.jooq.partnereventstream.public_.tables.InstrumentHotnessChangeEvent;

import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InstrumentHotnessChangeEventRecord extends UpdatableRecordImpl<InstrumentHotnessChangeEventRecord> implements Record4<Integer, String, Boolean, Timestamp> {

    private static final long serialVersionUID = -1798338563;

    /**
     * Setter for <code>PUBLIC.INSTRUMENT_HOTNESS_CHANGE_EVENT.ID</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>PUBLIC.INSTRUMENT_HOTNESS_CHANGE_EVENT.ID</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>PUBLIC.INSTRUMENT_HOTNESS_CHANGE_EVENT.ISIN</code>.
     */
    public void setIsin(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>PUBLIC.INSTRUMENT_HOTNESS_CHANGE_EVENT.ISIN</code>.
     */
    public String getIsin() {
        return (String) get(1);
    }

    /**
     * Setter for <code>PUBLIC.INSTRUMENT_HOTNESS_CHANGE_EVENT.HOT</code>.
     */
    public void setHot(Boolean value) {
        set(2, value);
    }

    /**
     * Getter for <code>PUBLIC.INSTRUMENT_HOTNESS_CHANGE_EVENT.HOT</code>.
     */
    public Boolean getHot() {
        return (Boolean) get(2);
    }

    /**
     * Setter for <code>PUBLIC.INSTRUMENT_HOTNESS_CHANGE_EVENT.TIMESTAMP</code>.
     */
    public void setTimestamp(Timestamp value) {
        set(3, value);
    }

    /**
     * Getter for <code>PUBLIC.INSTRUMENT_HOTNESS_CHANGE_EVENT.TIMESTAMP</code>.
     */
    public Timestamp getTimestamp() {
        return (Timestamp) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, String, Boolean, Timestamp> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, String, Boolean, Timestamp> valuesRow() {
        return (Row4) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return InstrumentHotnessChangeEvent.INSTRUMENT_HOTNESS_CHANGE_EVENT.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return InstrumentHotnessChangeEvent.INSTRUMENT_HOTNESS_CHANGE_EVENT.ISIN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Boolean> field3() {
        return InstrumentHotnessChangeEvent.INSTRUMENT_HOTNESS_CHANGE_EVENT.HOT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Timestamp> field4() {
        return InstrumentHotnessChangeEvent.INSTRUMENT_HOTNESS_CHANGE_EVENT.TIMESTAMP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getIsin();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean component3() {
        return getHot();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp component4() {
        return getTimestamp();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getIsin();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean value3() {
        return getHot();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp value4() {
        return getTimestamp();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InstrumentHotnessChangeEventRecord value1(Integer value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InstrumentHotnessChangeEventRecord value2(String value) {
        setIsin(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InstrumentHotnessChangeEventRecord value3(Boolean value) {
        setHot(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InstrumentHotnessChangeEventRecord value4(Timestamp value) {
        setTimestamp(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InstrumentHotnessChangeEventRecord values(Integer value1, String value2, Boolean value3, Timestamp value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached InstrumentHotnessChangeEventRecord
     */
    public InstrumentHotnessChangeEventRecord() {
        super(InstrumentHotnessChangeEvent.INSTRUMENT_HOTNESS_CHANGE_EVENT);
    }

    /**
     * Create a detached, initialised InstrumentHotnessChangeEventRecord
     */
    public InstrumentHotnessChangeEventRecord(Integer id, String isin, Boolean hot, Timestamp timestamp) {
        super(InstrumentHotnessChangeEvent.INSTRUMENT_HOTNESS_CHANGE_EVENT);

        set(0, id);
        set(1, isin);
        set(2, hot);
        set(3, timestamp);
    }
}
