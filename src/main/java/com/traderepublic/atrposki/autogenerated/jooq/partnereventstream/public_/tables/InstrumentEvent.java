/*
 * This file is generated by jOOQ.
 */
package com.traderepublic.atrposki.autogenerated.jooq.partnereventstream.public_.tables;


import com.traderepublic.atrposki.autogenerated.jooq.partnereventstream.public_.Indexes;
import com.traderepublic.atrposki.autogenerated.jooq.partnereventstream.public_.Keys;
import com.traderepublic.atrposki.autogenerated.jooq.partnereventstream.public_.Public;
import com.traderepublic.atrposki.autogenerated.jooq.partnereventstream.public_.tables.records.InstrumentEventRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InstrumentEvent extends TableImpl<InstrumentEventRecord> {

    private static final long serialVersionUID = -1796891985;

    /**
     * The reference instance of <code>PUBLIC.INSTRUMENT_EVENT</code>
     */
    public static final InstrumentEvent INSTRUMENT_EVENT = new InstrumentEvent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InstrumentEventRecord> getRecordType() {
        return InstrumentEventRecord.class;
    }

    /**
     * The column <code>PUBLIC.INSTRUMENT_EVENT.ID</code>.
     */
    public final TableField<InstrumentEventRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.INSTRUMENT_EVENT.ISIN</code>.
     */
    public final TableField<InstrumentEventRecord, String> ISIN = createField("ISIN", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.INSTRUMENT_EVENT.DESCRIPTION</code>.
     */
    public final TableField<InstrumentEventRecord, String> DESCRIPTION = createField("DESCRIPTION", org.jooq.impl.SQLDataType.VARCHAR(250), this, "");

    /**
     * The column <code>PUBLIC.INSTRUMENT_EVENT.ACTION</code>.
     */
    public final TableField<InstrumentEventRecord, String> ACTION = createField("ACTION", org.jooq.impl.SQLDataType.VARCHAR(250).nullable(false), this, "");

    /**
     * Create a <code>PUBLIC.INSTRUMENT_EVENT</code> table reference
     */
    public InstrumentEvent() {
        this(DSL.name("INSTRUMENT_EVENT"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.INSTRUMENT_EVENT</code> table reference
     */
    public InstrumentEvent(String alias) {
        this(DSL.name(alias), INSTRUMENT_EVENT);
    }

    /**
     * Create an aliased <code>PUBLIC.INSTRUMENT_EVENT</code> table reference
     */
    public InstrumentEvent(Name alias) {
        this(alias, INSTRUMENT_EVENT);
    }

    private InstrumentEvent(Name alias, Table<InstrumentEventRecord> aliased) {
        this(alias, aliased, null);
    }

    private InstrumentEvent(Name alias, Table<InstrumentEventRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> InstrumentEvent(Table<O> child, ForeignKey<O, InstrumentEventRecord> key) {
        super(child, key, INSTRUMENT_EVENT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.INDEX_EVENT_ISIN, Indexes.PRIMARY_KEY_3);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<InstrumentEventRecord, Integer> getIdentity() {
        return Keys.IDENTITY_INSTRUMENT_EVENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<InstrumentEventRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_3;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<InstrumentEventRecord>> getKeys() {
        return Arrays.<UniqueKey<InstrumentEventRecord>>asList(Keys.CONSTRAINT_3);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InstrumentEvent as(String alias) {
        return new InstrumentEvent(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InstrumentEvent as(Name alias) {
        return new InstrumentEvent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public InstrumentEvent rename(String name) {
        return new InstrumentEvent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public InstrumentEvent rename(Name name) {
        return new InstrumentEvent(name, null);
    }
}
