/*
 * This file is generated by jOOQ.
 */
package com.traderepublic.atrposki.autogenerated.jooq.partnereventstream.public_.tables;


import com.traderepublic.atrposki.autogenerated.jooq.partnereventstream.public_.Indexes;
import com.traderepublic.atrposki.autogenerated.jooq.partnereventstream.public_.Keys;
import com.traderepublic.atrposki.autogenerated.jooq.partnereventstream.public_.Public;
import com.traderepublic.atrposki.autogenerated.jooq.partnereventstream.public_.tables.records.PriceEventRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PriceEvent extends TableImpl<PriceEventRecord> {

    private static final long serialVersionUID = -517907497;

    /**
     * The reference instance of <code>PUBLIC.PRICE_EVENT</code>
     */
    public static final PriceEvent PRICE_EVENT = new PriceEvent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PriceEventRecord> getRecordType() {
        return PriceEventRecord.class;
    }

    /**
     * The column <code>PUBLIC.PRICE_EVENT.ID</code>.
     */
    public final TableField<PriceEventRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.PRICE_EVENT.PRICE</code>.
     */
    public final TableField<PriceEventRecord, Double> PRICE = createField("PRICE", org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.PRICE_EVENT.ISIN</code>.
     */
    public final TableField<PriceEventRecord, String> ISIN = createField("ISIN", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.PRICE_EVENT.TIMESTAMP</code>.
     */
    public final TableField<PriceEventRecord, Timestamp> TIMESTAMP = createField("TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP.precision(6).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.PRICE_EVENT.YEAR</code>.
     */
    public final TableField<PriceEventRecord, Integer> YEAR = createField("YEAR", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.PRICE_EVENT.MONTH</code>.
     */
    public final TableField<PriceEventRecord, Integer> MONTH = createField("MONTH", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.PRICE_EVENT.DAY</code>.
     */
    public final TableField<PriceEventRecord, Integer> DAY = createField("DAY", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.PRICE_EVENT.HOUR</code>.
     */
    public final TableField<PriceEventRecord, Integer> HOUR = createField("HOUR", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.PRICE_EVENT.MINUTE</code>.
     */
    public final TableField<PriceEventRecord, Integer> MINUTE = createField("MINUTE", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>PUBLIC.PRICE_EVENT</code> table reference
     */
    public PriceEvent() {
        this(DSL.name("PRICE_EVENT"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.PRICE_EVENT</code> table reference
     */
    public PriceEvent(String alias) {
        this(DSL.name(alias), PRICE_EVENT);
    }

    /**
     * Create an aliased <code>PUBLIC.PRICE_EVENT</code> table reference
     */
    public PriceEvent(Name alias) {
        this(alias, PRICE_EVENT);
    }

    private PriceEvent(Name alias, Table<PriceEventRecord> aliased) {
        this(alias, aliased, null);
    }

    private PriceEvent(Name alias, Table<PriceEventRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> PriceEvent(Table<O> child, ForeignKey<O, PriceEventRecord> key) {
        super(child, key, PRICE_EVENT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRICE_EVENT_DAY, Indexes.PRICE_EVENT_HOUR, Indexes.PRICE_EVENT_ISIN, Indexes.PRICE_EVENT_MINUTE, Indexes.PRICE_EVENT_MONTH, Indexes.PRICE_EVENT_TIMESTAMP, Indexes.PRICE_EVENT_YEAR, Indexes.PRIMARY_KEY_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PriceEventRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PRICE_EVENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PriceEventRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_2;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PriceEventRecord>> getKeys() {
        return Arrays.<UniqueKey<PriceEventRecord>>asList(Keys.CONSTRAINT_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PriceEvent as(String alias) {
        return new PriceEvent(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PriceEvent as(Name alias) {
        return new PriceEvent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PriceEvent rename(String name) {
        return new PriceEvent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PriceEvent rename(Name name) {
        return new PriceEvent(name, null);
    }
}
