package com.traderepublic.atrposki.core.instruments;
/*
 * @author aleksandartrposki@gmail.com
 * @since 28.07.19
 *
 *
 */

import com.traderepublic.atrposki.core.instruments.models.InstrumentEventDto;
import com.traderepublic.atrposki.core.instruments.models.InstrumentWithPriceDTO;
import org.jooq.Record2;
import org.jooq.Table;
import org.jooq.impl.DefaultDSLContext;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

import static com.traderepublic.atrposki.autogenerated.jooq.partnereventstream.public_.tables.InstrumentEvent.INSTRUMENT_EVENT;
import static com.traderepublic.atrposki.autogenerated.jooq.partnereventstream.public_.tables.PriceEvent.PRICE_EVENT;
import static java.util.stream.Collectors.toList;
import static org.jooq.impl.DSL.max;

@Service
public class InstrumentService {
    public static final String DELETED = "DELETE";
    public static final String LATEST_INSTRUMENT_EVENTS = "latest_instrument_events";
    public static final String LATEST_PRICE_EVENTS = "latest_price_events";

    DefaultDSLContext db;

    @Autowired
    public InstrumentService(DefaultDSLContext db) {
        this.db = db;
    }

    /**
     * @return a list of instruments with their latest know price
     */
    public List<InstrumentWithPriceDTO> getAllInstruments() {
        Table<Record2<Integer, String>> maxInstrumentIdPerISIN = db.select(max(INSTRUMENT_EVENT.ID).as("maxId"), INSTRUMENT_EVENT.ISIN)
                .from(INSTRUMENT_EVENT)
                .groupBy(INSTRUMENT_EVENT.ISIN)
                .asTable(LATEST_INSTRUMENT_EVENTS);

        Table<Record2<Integer, String>> maxPriceIdPerISIN = db.select(max(PRICE_EVENT.ID).as("maxId"), PRICE_EVENT.ISIN)
                .from(PRICE_EVENT)
                .groupBy(PRICE_EVENT.ISIN)
                .asTable(LATEST_PRICE_EVENTS);

        return db.select(INSTRUMENT_EVENT.ID, INSTRUMENT_EVENT.ISIN, PRICE_EVENT.PRICE)
                .from(INSTRUMENT_EVENT)
                .join(maxInstrumentIdPerISIN).on(INSTRUMENT_EVENT.ID.eq(maxInstrumentIdPerISIN.field("maxId", Integer.class)))
                .leftOuterJoin(maxPriceIdPerISIN).on(INSTRUMENT_EVENT.ISIN.eq(maxPriceIdPerISIN.field("ISIN", String.class)))
                .leftOuterJoin(PRICE_EVENT).on(PRICE_EVENT.ID.eq(maxPriceIdPerISIN.field("maxId", Integer.class)))
                .where(INSTRUMENT_EVENT.ACTION.ne(DELETED))
                .fetch()
                .stream()
                .map(InstrumentWithPriceDTO::fromRecord)
                .collect(toList());
    }

    /**
     * Saves the instrument event into db
     *
     * @return the same instrumentEventDto that was passed as a parameter;
     */
    public InstrumentEventDto save(InstrumentEventDto instrumentEventDto) {
        db.insertInto(INSTRUMENT_EVENT, INSTRUMENT_EVENT.ISIN, INSTRUMENT_EVENT.DESCRIPTION, INSTRUMENT_EVENT.ACTION)
                .values(instrumentEventDto.getIsin(), instrumentEventDto.getDescription(), instrumentEventDto.getAction())
                .execute();
        return instrumentEventDto;
    }
}
